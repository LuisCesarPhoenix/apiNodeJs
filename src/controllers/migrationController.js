const { MongoClient } = require("mongodb");
/*
Importa o m√≥dulo MongoDB e extrai a classe MongoClient.
MongoClient permite conectar-se a um banco de dados MongoDB e interagir com ele.
*/

const { queryMongoDB } = require("../config/mongoConfig");
/*
Importa a fun√ß√£o queryMongoDB de um arquivo de configura√ß√£o (mongoConfig.js).
Essa fun√ß√£o pode ser usada para interagir com o MongoDB de maneira centralizada.
*/

require("dotenv").config();
/*
Carrega vari√°veis de ambiente do arquivo .env.
Isso permite armazenar credenciais de conex√£o e configura√ß√µes sens√≠veis fora do c√≥digo-fonte.
*/

const COLLECTION_OLD = process.env.MONGO_COLLECTION_OLD;
/*
Armazena o nome da cole√ß√£o antiga (de onde os dados ser√£o extra√≠dos) em uma constante.
O valor √© carregado a partir da vari√°vel de ambiente MONGO_COLLECTION_OLD.
*/

const COLLECTION_NEW = process.env.MONGO_COLLECTION_NEW;
/*
Armazena o nome da nova cole√ß√£o (para onde os dados ser√£o inseridos).
O valor vem da vari√°vel de ambiente MONGO_COLLECTION_NEW.
*/

const BATCH_SIZE = parseInt(process.env.BATCH_SIZE, 10) || 1000;
/*
Define o tamanho do lote (quantidade de documentos processados por vez).
Converte a vari√°vel de ambiente BATCH_SIZE para um n√∫mero inteiro.
Se BATCH_SIZE n√£o estiver definida, o padr√£o ser√° 1000.
*/

async function migrateData(req, res) {
/*
Declara uma fun√ß√£o ass√≠ncrona chamada migrateData.
Essa fun√ß√£o realiza a migra√ß√£o de dados entre cole√ß√µes MongoDB.
Recebe req (requisi√ß√£o HTTP) e res (resposta HTTP) como par√¢metros.
*/

  let clientOld, clientNew;
  /*
  Declara duas vari√°veis para armazenar os clientes de conex√£o com os bancos antigos e novos.
  Elas ser√£o usadas para gerenciar a conex√£o com cada banco de dados.
  */

  try {
    console.log(`üîÑ Iniciando migra√ß√£o da cole√ß√£o "${COLLECTION_OLD}" para "${COLLECTION_NEW}"...`);
    /*
    Exibe no console o in√≠cio do processo de migra√ß√£o, incluindo os nomes das cole√ß√µes envolvidas.
    */

    // Criando conex√µes manuais para garantir persist√™ncia durante a migra√ß√£o
    clientOld = new MongoClient(process.env.MONGO_URI_OLD, { useNewUrlParser: true, useUnifiedTopology: true });
    /*
    Cria uma conex√£o com o banco de dados antigo.
    - MONGO_URI_OLD cont√©m a URL de conex√£o.
    - useNewUrlParser: true garante a compatibilidade com a nova sintaxe de conex√£o do MongoDB.
    - useUnifiedTopology: true ativa o novo mecanismo de gerenciamento de conex√µes.
    */

    await clientOld.connect();
    /*
    Estabelece a conex√£o com o banco de dados antigo.
    O uso de await garante que a execu√ß√£o s√≥ continue ap√≥s a conex√£o ser conclu√≠da.
    */

    const oldDb = clientOld.db(process.env.MONGO_DB_OLD);
    /*
    Obt√©m uma refer√™ncia ao banco de dados antigo, cujo nome √© armazenado na vari√°vel MONGO_DB_OLD.
    */

    const oldCollection = oldDb.collection(COLLECTION_OLD);
    /*
    Obt√©m uma refer√™ncia √† cole√ß√£o antiga, de onde os documentos ser√£o extra√≠dos.
    */

    clientNew = new MongoClient(process.env.MONGO_URI_NEW, { useNewUrlParser: true, useUnifiedTopology: true });
    /*
    Cria uma conex√£o com o banco de dados novo usando as mesmas configura√ß√µes da conex√£o anterior.
    */

    await clientNew.connect();
    /*
    Estabelece a conex√£o com o banco de dados novo.
    */

    const newDb = clientNew.db(process.env.MONGO_DB_NEW);
    /*
    Obt√©m uma refer√™ncia ao banco de dados novo, definido na vari√°vel de ambiente MONGO_DB_NEW.
    */

    const newCollection = newDb.collection(COLLECTION_NEW);
    /*
    Obt√©m uma refer√™ncia √† nova cole√ß√£o, onde os documentos ser√£o inseridos.
    */

    let totalMigrated = 0;
    /*
    Inicializa um contador para armazenar a quantidade total de registros migrados.
    */

    const cursor = oldCollection.find();
    /*
    Cria um cursor para percorrer todos os documentos da cole√ß√£o antiga.
    Um cursor permite ler os documentos em fluxo, sem carregar tudo na mem√≥ria de uma vez.
    */

    let batch = [];
    /*
    Declara um array vazio chamado batch, que armazenar√° documentos temporariamente antes da inser√ß√£o.
    */

    for await (const doc of cursor) {
    /*
    Percorre todos os documentos da cole√ß√£o antiga usando um loop ass√≠ncrono.
    O uso de await garante que os documentos sejam processados um por um sem bloquear a execu√ß√£o.
    */

      batch.push(doc);
      /*
      Adiciona o documento atual ao lote (batch).
      */

      if (batch.length >= BATCH_SIZE) {
        /*
        Verifica se o tamanho do lote atingiu o limite definido (BATCH_SIZE).
        Se sim, insere os documentos acumulados na nova cole√ß√£o.
        */

        await newCollection.insertMany(batch);
        /*
        Insere o lote de documentos na nova cole√ß√£o de forma eficiente.
        */

        totalMigrated += batch.length;
        /*
        Atualiza o contador total de registros migrados.
        */

        console.log(`‚úÖ ${totalMigrated} registros migrados...`);
        /*
        Exibe no console a quantidade de registros migrados at√© o momento.
        */

        batch = [];
        /*
        Esvazia o array batch para armazenar os pr√≥ximos documentos.
        */
      }
    }

    if (batch.length > 0) {
      /*
      Se ainda houver documentos n√£o inseridos ao final do loop, insere-os.
      Isso garante que nenhum documento fique para tr√°s.
      */

      await newCollection.insertMany(batch);
      /*
      Insere o lote restante na nova cole√ß√£o.
      */

      totalMigrated += batch.length;
      /*
      Atualiza o contador total de registros migrados.
      */

      console.log(`‚úÖ ${totalMigrated} registros migrados no total!`);
      /*
      Exibe no console o total de registros migrados.
      */
    }

    console.log("üéâ Migra√ß√£o conclu√≠da com sucesso!");
    /*
    Exibe uma mensagem indicando que a migra√ß√£o foi finalizada sem erros.
    */

    res.json({ message: "Migra√ß√£o conclu√≠da!", total: totalMigrated });
    /*
    Retorna uma resposta JSON informando o sucesso da migra√ß√£o e o total de registros migrados.
    */

  } catch (error) {
    /*
    Captura e trata qualquer erro que ocorra durante a execu√ß√£o do c√≥digo dentro do bloco try.
    */

    console.error("‚ùå Erro na migra√ß√£o:", error);
    /*
    Exibe o erro no console para diagn√≥stico.
    */

    res.status(500).json({ error: "Erro ao migrar os dados" });
    /*
    Retorna uma resposta HTTP 500 (Erro Interno do Servidor) com uma mensagem de erro em formato JSON.
    */

  } finally {
    /*
    O bloco finally √© executado independentemente de sucesso ou erro no try/catch.
    */

    if (clientOld) await clientOld.close();
    /*
    Se o cliente de conex√£o com o banco antigo foi inicializado, fecha a conex√£o.
    */

    if (clientNew) await clientNew.close();
    /*
    Se o cliente de conex√£o com o banco novo foi inicializado, fecha a conex√£o.
    */

    console.log("üîå Conex√µes fechadas.");
    /*
    Exibe no console que as conex√µes foram fechadas.
    */
  }
}

module.exports = { migrateData };
/*
Exporta a fun√ß√£o migrateData para que possa ser utilizada em outros arquivos do projeto.
*/

/*
Resumo do Funcionamento:
1. Conecta-se ao banco de dados antigo e novo.
2. L√™ os documentos da cole√ß√£o antiga usando um cursor.
3. Processa os documentos em lotes (batch) para evitar sobrecarga.
4. Insere os documentos na nova cole√ß√£o.
5. Exibe logs informando o progresso da migra√ß√£o.
6. Captura erros e os retorna na resposta HTTP.
7. Fecha as conex√µes ao final do processo.

Benef√≠cios desse c√≥digo:
Efici√™ncia: Processamento em lotes evita sobrecarga na mem√≥ria e melhora o desempenho.
Confiabilidade: Tratamento de erros garante que problemas sejam identificados e reportados.
Escalabilidade: F√°cil adapta√ß√£o para migra√ß√£o de grandes volumes de dados.
Seguran√ßa: Uso de vari√°veis de ambiente protege credenciais sens√≠veis.
C√≥digo limpo e modular: Pode ser reutilizado para diferentes migra√ß√µes no MongoDB.
*/


