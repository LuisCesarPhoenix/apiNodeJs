/*
src/config/mongoConfig.js (Conex√£o MongoDB sob demanda)
Objetivo: Criar conex√µes tempor√°rias com o MongoDB sob demanda, garantindo que a conex√£o seja aberta apenas quando
necess√°rio e fechada ap√≥s a opera√ß√£o para evitar o consumo de recursos.
*/

const { MongoClient } = require("mongodb");
/*
Importa a classe MongoClient do pacote oficial mongodb.
O MongoClient √© utilizado para estabelecer conex√µes com o banco de dados MongoDB.
*/

require("dotenv").config();
/*
Carrega as vari√°veis de ambiente do arquivo .env (exemplo: MONGO_URI).
Isso permite configurar a conex√£o sem expor credenciais diretamente no c√≥digo-fonte.
*/

async function queryMongoDB(dbName, collectionName, operation) {
/*
Declara uma fun√ß√£o ass√≠ncrona chamada queryMongoDB, que recebe:
- dbName ‚Üí Nome do banco de dados a ser acessado.
- collectionName ‚Üí Nome da cole√ß√£o (tabela no MongoDB) onde a opera√ß√£o ser√° executada.
- operation ‚Üí Fun√ß√£o ass√≠ncrona contendo a opera√ß√£o a ser realizada na cole√ß√£o.
A fun√ß√£o √© ass√≠ncrona para permitir o uso de await, garantindo a execu√ß√£o fluida das opera√ß√µes.
*/

  const client = new MongoClient(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
  /*
  Cria uma nova inst√¢ncia do MongoClient, configurando:
  - process.env.MONGO_URI: URL de conex√£o com o MongoDB obtida do .env.
  - { useNewUrlParser: true, useUnifiedTopology: true }: Configura√ß√µes recomendadas para compatibilidade.
  */

  try {
    await client.connect();
    /*
    Estabelece a conex√£o com o MongoDB utilizando await client.connect().
    O uso de await garante que a execu√ß√£o aguarde a conex√£o antes de prosseguir.
    */

    console.log(`‚úÖ Conectado ao MongoDB: ${dbName}`);
    // Exibe uma mensagem de sucesso no console ao conectar ao banco de dados.

    const db = client.db(dbName);
    const collection = db.collection(collectionName);
    /*
    Obt√©m a refer√™ncia ao banco de dados e √† cole√ß√£o espec√≠fica onde a opera√ß√£o ser√° executada.
    */

    const result = await operation(collection);
    /*
    Executa a opera√ß√£o passada como par√¢metro, que interage com a cole√ß√£o no MongoDB.
    O await garante que a opera√ß√£o seja conclu√≠da antes de continuar.
    */

    return result;
    /*
    Retorna os resultados da opera√ß√£o para a fun√ß√£o chamadora.
    */
  } catch (error) {
    console.error("‚ùå Erro no MongoDB:", error);
    throw error;
    /*
    Captura e exibe erros que possam ocorrer durante a conex√£o ou execu√ß√£o da opera√ß√£o.
    Lan√ßa o erro para que possa ser tratado na camada superior do c√≥digo.
    */
  } finally {
    await client.close();
    console.log("üîå Conex√£o com MongoDB fechada.");
    /*
    Garante que a conex√£o com o MongoDB ser√° fechada ap√≥s a opera√ß√£o, evitando conex√µes pendentes.
    O uso do finally assegura que a conex√£o ser√° fechada mesmo em caso de erro.
    */
  }
}

module.exports = { queryMongoDB };
/*
Exporta a fun√ß√£o queryMongoDB para ser utilizada em outros arquivos do projeto.
Isso permite executar opera√ß√µes no MongoDB de forma segura e reutiliz√°vel.
*/

/*
Resumo do Funcionamento:
1. queryMongoDB() √© chamada com os par√¢metros:
   - dbName: Nome do banco de dados.
   - collectionName: Nome da cole√ß√£o dentro do banco de dados.
   - operation: Fun√ß√£o contendo a opera√ß√£o a ser executada na cole√ß√£o.

2. O c√≥digo:
   a) Cria uma conex√£o tempor√°ria com o MongoDB.
   b) Obt√©m a refer√™ncia ao banco de dados e √† cole√ß√£o.
   c) Executa a opera√ß√£o, que foi chamada dentro da fun√ß√£o queryMongo(), na cole√ß√£o.
   d) Fecha a conex√£o antes de retornar os resultados.

3. Benef√≠cios:
   - Evita conex√µes abertas desnecess√°rias, otimizando o uso de recursos.
   - Mant√©m um c√≥digo limpo e reutiliz√°vel.
   - Facilita a execu√ß√£o de opera√ß√µes no MongoDB sem a necessidade de reescrever c√≥digo de conex√£o.
*/
