/*
src/config/mysqlConfig.js (Conex√£o MySQL sob demanda)
Cria a conex√£o s√≥ quando necess√°rio e fecha ap√≥s a requisi√ß√£o.
Objetivo: Gerenciar conex√µes tempor√°rias com o MySQL, garantindo que a conex√£o seja aberta apenas quando necess√°rio
e fechada ap√≥s a execu√ß√£o da consulta.
*/

const mysql = require("mysql2/promise");
/*
Importa o pacote mysql2 com suporte a Promise, permitindo o uso de async/await.
Isso evita o uso de callbacks e melhora a legibilidade do c√≥digo.
*/

require("dotenv").config();
/*
Carrega vari√°veis de ambiente do arquivo .env (exemplo: DB_HOST, DB_USER).
Isso mant√©m as credenciais seguras e evita exp√¥-las diretamente no c√≥digo.
*/

async function queryDatabase(query, params = []) {
/*
Define uma fun√ß√£o ass√≠ncrona chamada queryDatabase para executar consultas no MySQL.
Par√¢metros:
a) query: A string SQL que ser√° executada.
b) params: Um array de valores a serem passados para a query (opcional, padr√£o √© []).
*/
  const connection = await mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
  });
  /*
  Cria uma conex√£o tempor√°ria com o banco de dados.
  Usa process.env para obter as credenciais do MySQL definidas no .env.
  await garante que o c√≥digo aguarde a conex√£o antes de continuar.
  */

  try {
    const [rows] = await connection.execute(query, params);
    await connection.end(); // Fechando a conex√£o antes de retornar os dados.
    console.log("üîå Conex√£o com MySQL fechada.");
    return rows;
    /*
    Executa a query no MySQL com connection.execute(query, params).
    O await aguarda a execu√ß√£o da consulta antes de seguir.
    Fecha a conex√£o antes de retornar os resultados para evitar conex√µes pendentes.
    Retorna os resultados da consulta (rows).
    */
  } catch (error) {
    console.error("‚ùå Erro no MySQL:", error);
    throw error;
    /*
    Se houver erro ao executar a query, captura e exibe no console.
    Lan√ßa (throw error) o erro para que a aplica√ß√£o possa trat√°-lo.
     */
  } finally {
    if (connection && connection.end) {
      connection.end().catch(err => console.error("Erro ao fechar conex√£o MySQL:", err));
    }
    /*
    Garante que a conex√£o ser√° fechada, independentemente do sucesso ou erro.
    Usa connection.end().catch() para capturar poss√≠veis erros ao fechar a conex√£o.
    */
  }
}

module.exports = { queryDatabase };
/*
Exporta a fun√ß√£o ass√≠crona queryDatabase para que outros arquivos possam cham√°-la.
Permite que qualquer parte do projeto execute consultas no MySQL de forma segura e eficiente.
*/

/*
Resumo do Funcionamento
1-queryDatabase() √© chamada com a consulta SQL e par√¢metros opcionais.
2-Cria uma conex√£o tempor√°ria com o banco de dados.
3-Executa a consulta e fecha a conex√£o antes de retornar os dados.
4-Se houver erro, captura e exibe no console.
5-Usa um finally para garantir que a conex√£o ser√° fechada, mesmo em caso de erro.
*/

/*
Benef√≠cios desse c√≥digo:
Conex√µes otimizadas: Abre e fecha conex√µes sob demanda, evitando consumo desnecess√°rio de recursos.
C√≥digo limpo e reutiliz√°vel: Pode ser chamado de qualquer parte do projeto para executar consultas.
Seguran√ßa: Usa vari√°veis de ambiente para proteger credenciais.
Ass√≠ncrono: Usa async/await para melhor performance e legibilidade.
*/
