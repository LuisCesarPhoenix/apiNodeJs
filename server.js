// server.js (Inicia o servidor sem abrir conex√µes)
const express = require("express");
/*
Importa o framework Express, que facilita a cria√ß√£o de servidores web e APIs no Node.js.
require("express") carrega o m√≥dulo do Express, permitindo que ele seja usado no c√≥digo.
*/

const app = express();
/*
Cria uma inst√¢ncia do Express chamada app.
app representa o servidor da aplica√ß√£o e √© usado para definir rotas, middlewares e configura√ß√µes.
*/

const migrationRoutes = require("./src/routes/migrationRoutes");
/*
Importa o arquivo migrationRoutes.js, que cont√©m as rotas respons√°veis por lidar com a migra√ß√£o de dados.
require("./src/routes/migrationRoutes") carrega esse m√≥dulo para ser usado no servidor.
*/

const fileProcessingRoutes = require("./src/routes/fileProcessingRoutes");
/*
Importa as rotas definidas no arquivo "fileProcessingRoutes.js", localizado dentro da pasta "src/routes".
*/

const userRoutes = require("./src/routes/userRoutes");
/*
Importa as rotas de usu√°rio que s√£o respons√°veis pelo CRUD de usu√°rios no MySQL.
*/

app.use(express.json());
/*
Adiciona um middleware que permite o servidor interpretar requisi√ß√µes com JSON no corpo.
Sem isso, o Express n√£o conseguiria processar req.body em requisi√ß√µes do tipo POST ou PUT enviadas como JSON.
*/

app.use("/api", migrationRoutes);
/*
Define um prefixo "/api" para todas as rotas importadas de migrationRoutes.js.
Se migrationRoutes tiver uma rota /migrate, ela ser√° acess√≠vel via /api/migrate.
*/

app.use("/api", fileProcessingRoutes);
/*
Adiciona as rotas de processamento de arquivos √† aplica√ß√£o Express, definindo o prefixo "/api" para acess√°-las.
Isso significa que todas as rotas definidas em "fileProcessingRoutes.js" ser√£o acessadas atrav√©s do caminho "/api".
Por exemplo, se houver uma rota "/process/:filename" dentro de "fileProcessingRoutes.js",
ela ser√° acess√≠vel via "POST /api/process/:filename".
*/

app.use("/api", userRoutes);
/*
Adiciona as rotas de usu√°rio √† aplica√ß√£o Express, definindo o prefixo "/api" para acess√°-las.
Agora, as rotas de usu√°rio ser√£o acessadas via "/api/users", "/api/users/:id", etc.
*/

const PORT = process.env.PORT || 3000;
/*
Define a porta onde o servidor vai rodar.
Se existir a vari√°vel de ambiente PORT, ele usa esse valor; caso contr√°rio, usa a porta padr√£o 3000.
*/

app.listen(PORT, () => {
  console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`);
});
/*
Inicia o servidor Express e faz com que ele escute conex√µes na porta definida.
Quando o servidor come√ßa a rodar, ele exibe a mensagem "üöÄ Servidor rodando em http://localhost:PORT" no terminal.
*/

/*
Resumo do fluxo do c√≥digo:
Esse c√≥digo cria um servidor Express que:
- Aceita requisi√ß√µes JSON.
- Define um prefixo /api para as rotas.
- Importa as rotas de migra√ß√£o, processamento de arquivos e de usu√°rios.
- Escuta conex√µes na porta 3000 (ou outra definida no ambiente)
*/
