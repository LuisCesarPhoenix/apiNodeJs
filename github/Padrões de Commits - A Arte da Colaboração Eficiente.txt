Padrões de Commits: A Arte da Colaboração Eficiente
#GitHub #Git

Essas mensagens seguem os Padrões de Commits, uma prática essencial para a colaboração eficiente em projetos de desenvolvimento de 
software.

Os Padrões de Commits são uma espécie de etiqueta para as mensagens que você adiciona ao controle de versão do seu código. Eles 
oferecem uma estrutura consistente para as mensagens de commit, tornando o histórico do seu repositório claro e fácil de entender.

feat (Feature): Adiciona uma nova funcionalidade ao projeto.
git commit -m "feat: Adiciona funcionalidade de login" 

fix: Corrige um problema no código ou em uma funcionalidade (bugs).
git commit -m "fix: Corrige erro de validação no formulário"
 
docs: Atualiza documentações, como o arquivo README.md.
git commit -m "docs: Atualiza README com instruções de instalação" 

style: Atualiza estilos e arquivos de estilização.
git commit -m "style: Atualiza estilos da página de login" 

refactor: Realiza uma refatoração de código sem alterar sua funcionalidade, apenas melhorias.
git commit -m "refactor: Aprimora lógica de autenticação" 

perf: Atualiza e/ou configura a performance do código.
git commit -m "perf: Otimiza consulta ao banco de dados" 

test: Cria, ajusta ou refatora testes.
git commit -m "test: Adiciona teste unitário para validação de senha" 

build: Atualiza ou modifica ferramentas de build, como a configuração de um ambiente de desenvolvimento.
git commit -m "build: Atualiza configuração de compilação" 

ci: Atualiza arquivos e configurações de CI, como a configuração de um pipeline de CI/CD.
git commit -m "ci: Configura pipeline de CI/CD com GitHub Actions" 

chore: Usado quando não há alterações no código fonte, mas sim no ambiente de desenvolvimento (ex: instalação de libs, configuração 
do package.json, configuração de Docker, DB, etc).
git commit -m "chore: Instala bibliotecas de desenvolvimento" 

Benefícios dos Padrões de Commits:
Transparência: Cada mensagem de commit conta uma história concisa das mudanças feitas.
Colaboração: Equipes podem entender e contribuir mais efetivamente.
Rastreabilidade: Facilita a localização de alterações específicas no histórico.

Como Adotar os Padrões de Commits:
Conhecimento: Familiarize-se com os tipos de padrões e suas aplicações.
Implementação: Adote-os em seu workflow diário de desenvolvimento.
Compartilhamento: Incentive sua equipe a seguir os mesmos padrões.
Ao abraçar os Padrões de Commits, você não apenas melhora a qualidade do seu código, mas também eleva a eficiência e a colaboração 
em todo o projeto. Adote essa prática e transforme suas mensagens de commit em narrativas para seu código! 